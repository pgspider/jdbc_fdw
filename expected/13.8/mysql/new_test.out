--
-- MySql
-- New test
--
\set ECHO none
\i sql/13.8/new_test.sql
--
-- TIMESTAMP
--
--Testcase 1:
CREATE EXTENSION :DB_EXTENSIONNAME;
--Testcase 2:
CREATE SERVER :DB_SERVERNAME FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
OPTIONS (drivername :DB_DRIVERNAME,
url :DB_URL,
querytimeout '15',
jarfile :DB_DRIVERPATH,
maxheapsize '600');
--Testcase 3:
CREATE USER MAPPING FOR public SERVER :DB_SERVERNAME OPTIONS (username :DB_USER,password :DB_PASS);  
--Primary key options
--Testcase 4:
CREATE FOREIGN TABLE tbl01 (id bigint  OPTIONS (key 'true'), c1 int) SERVER :DB_SERVERNAME OPTIONS ( table_name 'tbl01');
--Testcase 5:
EXPLAIN VERBOSE
INSERT INTO tbl01 VALUES (166565, 1);
                        QUERY PLAN                         
-----------------------------------------------------------
 Insert on public.tbl01  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl01(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: '166565'::bigint, 1
(4 rows)

--Testcase 6:
INSERT INTO tbl01 VALUES (166565, 1);
--Testcase 7:
EXPLAIN VERBOSE
INSERT INTO tbl01 (c1) VALUES (3);
                        QUERY PLAN                         
-----------------------------------------------------------
 Insert on public.tbl01  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl01(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: NULL::bigint, 3
(4 rows)

--Testcase 8:
INSERT INTO tbl01 (c1) VALUES (3);
psql:sql/13.8/new_test.sql:28: ERROR:  remote server returned an error
--Testcase 9:
EXPLAIN VERBOSE
INSERT INTO tbl01 VALUES (null, 4);
                        QUERY PLAN                         
-----------------------------------------------------------
 Insert on public.tbl01  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl01(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: NULL::bigint, 4
(4 rows)

--Testcase 10:
INSERT INTO tbl01 VALUES (null, 4);
psql:sql/13.8/new_test.sql:33: ERROR:  remote server returned an error
--Testcase 11:
EXPLAIN VERBOSE
INSERT INTO tbl01 VALUES (166565, 7);
                        QUERY PLAN                         
-----------------------------------------------------------
 Insert on public.tbl01  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl01(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: '166565'::bigint, 7
(4 rows)

--Testcase 12:
INSERT INTO tbl01 VALUES (166565, 7);
psql:sql/13.8/new_test.sql:38: ERROR:  remote server returned an error
--Testcase 13:
CREATE FOREIGN TABLE tbl02 (id char(255)  OPTIONS (key 'true'), c1 INT, c2 float8, c3 boolean) SERVER :DB_SERVERNAME OPTIONS ( table_name 'tbl02');
--Testcase 14:
EXPLAIN VERBOSE
INSERT INTO tbl02 VALUES (repeat('a', 255), 1, 12112.12, true);
                                                                                                                                                                QUERY PLAN                                                                                                                                                                
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.tbl02  (cost=0.00..0.01 rows=1 width=1037)
   Remote SQL: INSERT INTO tbl02(id, c1, c2, c3) VALUES (?, ?, ?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=1037)
         Output: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::character(255), 1, '12112.12'::double precision, true
(4 rows)

--Testcase 15:
INSERT INTO tbl02 VALUES (repeat('a', 255), 1, 12112.12, true);
--Testcase 16:
EXPLAIN VERBOSE
INSERT INTO tbl02 VALUES (NULL, 2, -12.23, false);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.tbl02  (cost=0.00..0.01 rows=1 width=1037)
   Remote SQL: INSERT INTO tbl02(id, c1, c2, c3) VALUES (?, ?, ?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=1037)
         Output: NULL::character(255), 2, '-12.23'::double precision, false
(4 rows)

--Testcase 17:
INSERT INTO tbl02 VALUES (NULL, 2, -12.23, false);
psql:sql/13.8/new_test.sql:50: ERROR:  remote server returned an error
--Testcase 18:
EXPLAIN VERBOSE
INSERT INTO tbl02(c1) VALUES (3);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Insert on public.tbl02  (cost=0.00..0.01 rows=1 width=45)
   Remote SQL: INSERT INTO tbl02(id, c1, c2, c3) VALUES (?, ?, ?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=45)
         Output: NULL::bpchar, 3, NULL::double precision, NULL::boolean
(4 rows)

--Testcase 19:
INSERT INTO tbl02(c1) VALUES (3);
psql:sql/13.8/new_test.sql:55: ERROR:  remote server returned an error
--Testcase 20:
ALTER FOREIGN TABLE tbl02 ALTER COLUMN c2 SET NOT NULL;
--Testcase 21:
EXPLAIN VERBOSE
SELECT * FROM tbl02;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.tbl02  (cost=100.00..112.31 rows=77 width=1037)
   Output: id, c1, c2, c3
   Remote SQL: SELECT id, c1, c2, c3 FROM tbl02
(3 rows)

--Testcase 22:
SELECT * FROM tbl02;
                                                                                                                               id                                                                                                                                | c1 |    c2    | c3 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----+----------+----
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |  1 | 12112.12 | t
(1 row)

--Testcase 23:
ALTER FOREIGN TABLE tbl02 ALTER c2 OPTIONS (key 'true');
--Testcase 24:
EXPLAIN VERBOSE
SELECT * FROM tbl02;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.tbl02  (cost=100.00..112.31 rows=77 width=1037)
   Output: id, c1, c2, c3
   Remote SQL: SELECT id, c1, c2, c3 FROM tbl02
(3 rows)

--Testcase 25:
SELECT * FROM tbl02;
                                                                                                                               id                                                                                                                                | c1 |    c2    | c3 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----+----------+----
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |  1 | 12112.12 | t
(1 row)

--Testcase 26:
ALTER FOREIGN TABLE tbl02 ALTER c2 OPTIONS (SET key 'false');
--Testcase 27:
EXPLAIN VERBOSE
SELECT * FROM tbl02;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.tbl02  (cost=100.00..112.31 rows=77 width=1037)
   Output: id, c1, c2, c3
   Remote SQL: SELECT id, c1, c2, c3 FROM tbl02
(3 rows)

--Testcase 28:
SELECT * FROM tbl02;
                                                                                                                               id                                                                                                                                | c1 |    c2    | c3 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----+----------+----
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |  1 | 12112.12 | t
(1 row)

--Testcase 29:
ALTER FOREIGN TABLE tbl02 ALTER c3 OPTIONS (key 'true');
--Testcase 30:
EXPLAIN VERBOSE
SELECT * FROM tbl02;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.tbl02  (cost=100.00..112.31 rows=77 width=1037)
   Output: id, c1, c2, c3
   Remote SQL: SELECT id, c1, c2, c3 FROM tbl02
(3 rows)

--Testcase 31:
SELECT * FROM tbl02;
                                                                                                                               id                                                                                                                                | c1 |    c2    | c3 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----+----------+----
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |  1 | 12112.12 | t
(1 row)

--Testcase 32:
CREATE FOREIGN TABLE tbl03 (id timestamp  OPTIONS (key 'true'), c1 int) SERVER :DB_SERVERNAME OPTIONS ( table_name 'tbl03');
--Testcase 33:
EXPLAIN VERBOSE
INSERT INTO tbl03 VALUES ('2000-01-01 00:00:00', 0);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.tbl03  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl03(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: 'Sat Jan 01 00:00:00 2000'::timestamp without time zone, 0
(4 rows)

--Testcase 34:
INSERT INTO tbl03 VALUES ('2000-01-01 00:00:00', 0);
--Testcase 35:
EXPLAIN VERBOSE
INSERT INTO tbl03 VALUES ('2000-01-01 00:00:00', 1);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.tbl03  (cost=0.00..0.01 rows=1 width=12)
   Remote SQL: INSERT INTO tbl03(id, c1) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=12)
         Output: 'Sat Jan 01 00:00:00 2000'::timestamp without time zone, 1
(4 rows)

--Testcase 36:
INSERT INTO tbl03 VALUES ('2000-01-01 00:00:00', 1);
psql:sql/13.8/new_test.sql:95: ERROR:  remote server returned an error
--WHERE clause push-down with functions in WHERE
--Testcase 37:
CREATE FOREIGN TABLE tbl04 (id INT  OPTIONS (key 'true'),  c1 float8, c2 bigint, c3 text, c4 boolean, c5 timestamp) SERVER :DB_SERVERNAME OPTIONS ( table_name 'tbl04');
--Testcase 38:
EXPLAIN VERBOSE
SELECT * FROM tbl04 WHERE abs(c1) > 3233;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..130.86 rows=321 width=61)
   Output: id, c1, c2, c3, c4, c5
   Remote SQL: SELECT id, c1, c2, c3, c4, c5 FROM tbl04 WHERE ((abs(c1) > 3233))
(3 rows)

--Testcase 39:
SELECT * FROM tbl04 WHERE abs(c1) > 3233;
 id |    c1    |  c2  |   c3    | c4 |            c5            
----+----------+------+---------+----+--------------------------
  6 | 45021.21 | 2121 | example | f  | Fri Oct 01 00:00:00 1999
  9 |  6867.34 | 8916 | thing   | f  | Fri Oct 01 10:10:00 2010
(2 rows)

--Testcase 40:
EXPLAIN VERBOSE
SELECT id, c1, c2 FROM tbl04 WHERE sqrt(c2) > sqrt(c1) AND c1 >= 0 AND c2 > 0;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..157.91 rows=69 width=20)
   Output: id, c1, c2
   Remote SQL: SELECT id, c1, c2 FROM tbl04 WHERE ((c1 >= 0)) AND ((c2 > 0)) AND ((sqrt(c2) > sqrt(c1)))
(3 rows)

--Testcase 41:
SELECT id, c1, c2 FROM tbl04 WHERE sqrt(c2) > sqrt(c1) AND c1 >= 0 AND c2 > 0;
 id |    c1    |   c2   
----+----------+--------
  1 |    31.12 | 128912
  2 |  2565.56 |   6565
  4 |    55.23 |    523
  7 | 121.9741 |  23241
  8 |       75 |    316
  9 |  6867.34 |   8916
(6 rows)

--Testcase 42:
EXPLAIN VERBOSE
SELECT c1, c2 FROM tbl04 WHERE c3 || c3 != 'things thing';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..181.48 rows=2038 width=16)
   Output: c1, c2
   Remote SQL: SELECT c1, c2 FROM tbl04 WHERE (((c3 || c3) <> 'things thing'))
(3 rows)

--Testcase 43:
SELECT c1, c2 FROM tbl04 WHERE c3 || c3 != 'things thing';
    c1    |   c2    
----------+---------
    31.12 |  128912
  2565.56 |    6565
 -121.122 | 1829812
    55.23 |     523
    -1.12 |   22342
 45021.21 |    2121
 121.9741 |   23241
       75 |     316
  6867.34 |    8916
(9 rows)

--Testcase 44:
EXPLAIN VERBOSE
SELECT c1, id, c3 || c3 FROM tbl04 WHERE abs(c2) <> abs(c1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..161.03 rows=1198 width=44)
   Output: c1, id, (c3 || c3)
   Remote SQL: SELECT id, c1, c3 FROM tbl04 WHERE ((abs(c2) <> abs(c1)))
(3 rows)

--Testcase 45:
SELECT c1, id, c3 || c3 FROM tbl04 WHERE abs(c2) <> abs(c1);
    c1    | id |       ?column?       
----------+----+----------------------
    31.12 |  1 | anystringanystring
  2565.56 |  2 | exampleexample
 -121.122 |  3 | thingthing
    55.23 |  4 | !)@(#)!_#!!)@(#)!_#!
    -1.12 |  5 | (!)JAWLFJ(!)JAWLFJ
 45021.21 |  6 | exampleexample
 121.9741 |  7 | thingthing
       75 |  8 | exampleexample
  6867.34 |  9 | thingthing
(9 rows)

--Testcase 46:
EXPLAIN VERBOSE
SELECT id + id, c2, c3 || 'afas' FROM tbl04 WHERE floor(c2) > 0;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..141.09 rows=401 width=44)
   Output: (id + id), c2, (c3 || 'afas'::text)
   Remote SQL: SELECT id, c2, c3 FROM tbl04 WHERE ((floor(c2) > 0))
(3 rows)

--Testcase 47:
SELECT id + id, c2, c3 || 'afas' FROM tbl04 WHERE floor(c2) > 0;
 ?column? |   c2    |    ?column?    
----------+---------+----------------
        2 |  128912 | anystringafas
        4 |    6565 | exampleafas
        6 | 1829812 | thingafas
        8 |     523 | !)@(#)!_#!afas
       10 |   22342 | (!)JAWLFJafas
       12 |    2121 | exampleafas
       14 |   23241 | thingafas
       16 |     316 | exampleafas
       18 |    8916 | thingafas
(9 rows)

--Testcase 48:
EXPLAIN VERBOSE
SELECT c2, c3, c4, c5 FROM tbl04 WHERE c5 > '2000-01-01';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..131.50 rows=374 width=49)
   Output: c2, c3, c4, c5
   Remote SQL: SELECT c2, c3, c4, c5 FROM tbl04 WHERE ((c5 > '2000-01-01 00:00:00'))
(3 rows)

--Testcase 49:
SELECT c2, c3, c4, c5 FROM tbl04 WHERE c5 > '2000-01-01';
  c2   |    c3     | c4 |            c5            
-------+-----------+----+--------------------------
 22342 | (!)JAWLFJ | f  | Mon Nov 01 00:00:00 2010
 23241 | thing     | f  | Fri Oct 01 00:00:00 2010
  8916 | thing     | f  | Fri Oct 01 10:10:00 2010
(3 rows)

--Testcase 50:
EXPLAIN VERBOSE
SELECT c5, c4, c2 FROM tbl04 WHERE c5 IN ('2000-01-01', '2010-11-01 00:00:00');
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=100.00..135.37 rows=20 width=17)
   Output: c5, c4, c2
   Remote SQL: SELECT c2, c4, c5 FROM tbl04 WHERE (c5 IN ('2000-01-01 00:00:00', '2010-11-01 00:00:00'))
(3 rows)

--Testcase 51:
SELECT c5, c4, c2 FROM tbl04 WHERE c5 IN ('2000-01-01', '2010-11-01 00:00:00');
            c5            | c4 |   c2    
--------------------------+----+---------
 Sat Jan 01 00:00:00 2000 | t  |  128912
 Sat Jan 01 00:00:00 2000 | f  |    6565
 Sat Jan 01 00:00:00 2000 | t  | 1829812
 Mon Nov 01 00:00:00 2010 | f  |   22342
(4 rows)

--Testcase 52:
EXPLAIN VERBOSE
SELECT c3, c5, c1 FROM tbl04 WHERE c1 > ALL(SELECT id FROM tbl04 WHERE c4 = true);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=200.00..45419.94 rows=568 width=48)
   Output: tbl04.c3, tbl04.c5, tbl04.c1
   Filter: (SubPlan 1)
   Remote SQL: SELECT c1, c3, c5 FROM tbl04
   SubPlan 1
     ->  Materialize  (cost=100.00..175.80 rows=1462 width=4)
           Output: tbl04_1.id
           ->  Foreign Scan on public.tbl04 tbl04_1  (cost=100.00..168.49 rows=1462 width=4)
                 Output: tbl04_1.id
                 Remote SQL: SELECT id FROM tbl04 WHERE (c4)
(10 rows)

--Testcase 53:
SELECT c3, c5, c1 FROM tbl04 WHERE c1 > ALL(SELECT id FROM tbl04 WHERE c4 = true);
     c3     |            c5            |    c1    
------------+--------------------------+----------
 anystring  | Sat Jan 01 00:00:00 2000 |    31.12
 example    | Sat Jan 01 00:00:00 2000 |  2565.56
 !)@(#)!_#! | Thu Nov 01 00:00:00 1990 |    55.23
 example    | Fri Oct 01 00:00:00 1999 | 45021.21
 thing      | Fri Oct 01 00:00:00 2010 | 121.9741
 example    | Fri Oct 01 10:10:00 1999 |       75
 thing      | Fri Oct 01 10:10:00 2010 |  6867.34
(7 rows)

--Testcase 54:
EXPLAIN VERBOSE
SELECT c1, c5, c3, c2 FROM tbl04 WHERE c1 = ANY (SELECT c1 FROM tbl04 WHERE c4 != false) AND c1 > 0 OR c2 < 0;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.tbl04  (cost=264.40..312.80 rows=455 width=56)
   Output: tbl04.c1, tbl04.c5, tbl04.c3, tbl04.c2
   Filter: (((hashed SubPlan 1) AND (tbl04.c1 > '0'::double precision)) OR (tbl04.c2 < 0))
   Remote SQL: SELECT c1, c2, c3, c5 FROM tbl04
   SubPlan 1
     ->  Foreign Scan on public.tbl04 tbl04_1  (cost=100.00..161.20 rows=1280 width=8)
           Output: tbl04_1.c1
           Remote SQL: SELECT c1 FROM tbl04 WHERE (c4)
(8 rows)

--Testcase 55:
SELECT c1, c5, c3, c2 FROM tbl04 WHERE c1 = ANY (SELECT c1 FROM tbl04 WHERE c4 != false) AND c1 > 0 OR c2 < 0;
  c1   |            c5            |    c3     |   c2   
-------+--------------------------+-----------+--------
 31.12 | Sat Jan 01 00:00:00 2000 | anystring | 128912
(1 row)

--aggregation function push-down: add variance
--Testcase 56:
EXPLAIN VERBOSE
SELECT variance(c1), variance(c2) FROM tbl04;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=40)
   Output: (variance(c1)), (variance(c2))
   Remote SQL: SELECT variance(c1), variance(c2) FROM tbl04
(3 rows)

--Testcase 57:
SELECT variance(c1), variance(c2) FROM tbl04;
      variance      |      variance      
--------------------+--------------------
 194362960.38635424 | 323487207882.17285
(1 row)

--Testcase 58:
EXPLAIN VERBOSE
SELECT variance(c1) FROM tbl04 WHERE c3 <> 'aef';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (variance(c1))
   Remote SQL: SELECT variance(c1) FROM tbl04 WHERE ((c3 <> 'aef'))
(3 rows)

--Testcase 59:
SELECT variance(c1) FROM tbl04 WHERE c3 <> 'aef';
      variance      
--------------------
 194362960.38635424
(1 row)

--Testcase 60:
EXPLAIN VERBOSE
SELECT max(id), min(c1), variance(c2) FROM tbl04;
                           QUERY PLAN                           
----------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=44)
   Output: (max(id)), (min(c1)), (variance(c2))
   Remote SQL: SELECT max(id), min(c1), variance(c2) FROM tbl04
(3 rows)

--Testcase 61:
SELECT max(id), min(c1), variance(c2) FROM tbl04;
 max |   min    |      variance      
-----+----------+--------------------
   9 | -121.122 | 323487207882.17285
(1 row)

--Testcase 62:
EXPLAIN VERBOSE
SELECT variance(c2), variance(c1) FROM tbl04;
                         QUERY PLAN                         
------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=40)
   Output: (variance(c2)), (variance(c1))
   Remote SQL: SELECT variance(c2), variance(c1) FROM tbl04
(3 rows)

--Testcase 63:
SELECT variance(c2), variance(c1) FROM tbl04;
      variance      |      variance      
--------------------+--------------------
 323487207882.17285 | 194362960.38635424
(1 row)

--Testcase 64:
EXPLAIN VERBOSE
SELECT sum(c1), variance(c1) FROM tbl04 WHERE id <= 10;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=16)
   Output: (sum(c1)), (variance(c1))
   Remote SQL: SELECT sum(c1), variance(c1) FROM tbl04 WHERE ((id <= 10))
(3 rows)

--Testcase 65:
SELECT sum(c1), variance(c1) FROM tbl04 WHERE id <= 10;
    sum     |      variance      
------------+--------------------
 54615.1921 | 194362960.38635424
(1 row)

----aggregation function push-down: count(var)
--Testcase 83:
EXPLAIN VERBOSE
SELECT count(c1), sum(c2), variance(c2) FROM tbl04;
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=72)
   Output: (count(c1)), (sum(c2)), (variance(c2))
   Remote SQL: SELECT count(c1), sum(c2), variance(c2) FROM tbl04
(3 rows)

--Testcase 84:
SELECT count(c1), sum(c2), variance(c2) FROM tbl04;
 count |   sum   |      variance      
-------+---------+--------------------
     9 | 2022748 | 323487207882.17285
(1 row)

----aggregation function push-down: count(*)
--Testcase 85:
EXPLAIN VERBOSE
SELECT count(*) FROM tbl04;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (count(*))
   Remote SQL: SELECT count(*) FROM tbl04
(3 rows)

--Testcase 86:
SELECT count(*) FROM tbl04;
 count 
-------
     9
(1 row)

--aggregation function push-down: having
--Testcase 66:
EXPLAIN VERBOSE
SELECT count(c1), sum(c2), variance(c2) FROM tbl04 HAVING (count(c1) > 0);
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=191.92..191.94 rows=1 width=72)
   Output: count(c1), sum(c2), variance(c2)
   Filter: (count(tbl04.c1) > 0)
   ->  Foreign Scan on public.tbl04  (cost=100.00..171.44 rows=2048 width=16)
         Output: id, c1, c2, c3, c4, c5
         Remote SQL: SELECT c1, c2 FROM tbl04
(6 rows)

--Testcase 67:
SELECT count(c1), sum(c2), variance(c2) FROM tbl04 HAVING (count(c1) > 0);
 count |   sum   |       variance        
-------+---------+-----------------------
     9 | 2022748 | 363923108867.44444444
(1 row)

--Testcase 68:
EXPLAIN VERBOSE
SELECT count(c1) + sum (c2), variance(c2)/2.12 FROM tbl04 HAVING count(c4) != 0 AND variance(c2) > 55.54;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=194.92..194.94 rows=1 width=64)
   Output: ((count(c1))::numeric + sum(c2)), (variance(c2) / 2.12)
   Filter: ((count(tbl04.c4) <> 0) AND (variance(tbl04.c2) > 55.54))
   ->  Foreign Scan on public.tbl04  (cost=100.00..169.94 rows=1998 width=17)
         Output: id, c1, c2, c3, c4, c5
         Remote SQL: SELECT c1, c2, c4 FROM tbl04
(6 rows)

--Testcase 69:
SELECT count(c1) + sum (c2), variance(c2)/2.12 FROM tbl04 HAVING count(c4) != 0 AND variance(c2) > 55.54;
 ?column? |       ?column?        
----------+-----------------------
  2022757 | 171661843805.39832285
(1 row)

--aggregation function push-down: non push-down case
--Testcase 95:
EXPLAIN VERBOSE
SELECT bit_and(id) FROM tbl04;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=205.06..205.07 rows=1 width=4)
   Output: bit_and(id)
   ->  Foreign Scan on public.tbl04  (cost=100.00..197.75 rows=2925 width=4)
         Output: id, c1, c2, c3, c4, c5
         Remote SQL: SELECT id FROM tbl04
(5 rows)

--Testcase 96:
SELECT bit_and(id) FROM tbl04;
 bit_and 
---------
       0
(1 row)

--Testcase 97:
EXPLAIN VERBOSE
SELECT bit_or(id) FROM tbl04;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=205.06..205.07 rows=1 width=4)
   Output: bit_or(id)
   ->  Foreign Scan on public.tbl04  (cost=100.00..197.75 rows=2925 width=4)
         Output: id, c1, c2, c3, c4, c5
         Remote SQL: SELECT id FROM tbl04
(5 rows)

--Testcase 98:
SELECT bit_or(id) FROM tbl04;
 bit_or 
--------
     15
(1 row)

--Testcase 99:
EXPLAIN VERBOSE
SELECT corr(id, c1) FROM tbl04;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=189.63..189.64 rows=1 width=8)
   Output: corr((id)::double precision, c1)
   ->  Foreign Scan on public.tbl04  (cost=100.00..178.25 rows=2275 width=12)
         Output: id, c1, c2, c3, c4, c5
         Remote SQL: SELECT id, c1 FROM tbl04
(5 rows)

--Testcase 100:
SELECT corr(id, c1) FROM tbl04;
        corr         
---------------------
 0.20164072965667135
(1 row)

--Test Long Varbinary type (Mysql)
--Testcase 72:
CREATE FOREIGN TABLE tbl05 (id INT  OPTIONS (key 'true'),  v BYTEA) SERVER :DB_SERVERNAME OPTIONS ( table_name 'tbl05');
--Testcase 73:
INSERT INTO tbl05 (id, v) VALUES (1, decode('ff','hex'));
--Testcase 74:
EXPLAIN VERBOSE SELECT string_agg(v, '') FROM tbl05;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=157.52..157.53 rows=1 width=32)
   Output: string_agg(v, '\x'::bytea)
   ->  Foreign Scan on public.tbl05  (cost=100.00..153.86 rows=1462 width=32)
         Output: id, v
         Remote SQL: SELECT v FROM tbl05
(5 rows)

--Testcase 75:
SELECT string_agg(v, '') FROM tbl05;
 string_agg 
------------
 \xff
(1 row)

-- The floating-point types are float and double, which are conceptually associated with the single-precision 32-bit 
-- and double-precision 64-bit format IEEE 754 values and operations as specified in IEEE Standard for Binary Floating-Point Arithmetic.
-- A floating-point value as written in an SQL statement may not be the same as the value represented internally. 
-- With limitation about floating-point value, in order to get correct result, can decide on an acceptable tolerance 
-- for differences between the numbers and then do the comparison against the tolerance value.
--Testcase 76:
CREATE FOREIGN TABLE tbl06(id serial OPTIONS (key 'true'), f1 float4) SERVER :DB_SERVERNAME OPTIONS (table_name 'float4_tbl');
--Testcase 77:
INSERT INTO tbl06(f1) VALUES ('    0.0');
--Testcase 78:
INSERT INTO tbl06(f1) VALUES ('1004.30   ');
--Testcase 79:
INSERT INTO tbl06(f1) VALUES ('     -34.84    ');
--Testcase 80:
INSERT INTO tbl06(f1) VALUES ('1.2345678901234e+20');
--Testcase 81:
INSERT INTO tbl06(f1) VALUES ('1.2345678901234e-20');
--Testcase 82:
SELECT '' AS four, f.f1 FROM tbl06 f WHERE f.f1 <> '1004.3' GROUP BY f.id, f.f1 HAVING abs(f1 - 1004.3) > 0.001 ORDER BY f.id;
 four |     f1      
------+-------------
      |           0
      |      -34.84
      | 1.23457e+20
      | 1.23457e-20
(4 rows)

--Testcase 87:
CREATE FOREIGN TABLE test_explicit_cast (id serial OPTIONS (key 'true'), c1 text) SERVER :DB_SERVERNAME OPTIONS ( table_name 'test_explicit_cast');
--Testcase 88:
INSERT INTO test_explicit_cast(c1) VALUES ('1'), ('1.5'), ('1.6');
-- jdbc_fdw does not support push-down aggregate function if it has explicit cast inside
--Testcase 89:
EXPLAIN VERBOSE
SELECT var_samp(c1::numeric) FROM test_explicit_cast; -- Does not push down
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=164.83..164.84 rows=1 width=32)
   Output: var_samp((c1)::numeric)
   ->  Foreign Scan on public.test_explicit_cast  (cost=100.00..153.86 rows=1462 width=32)
         Output: id, c1
         Remote SQL: SELECT c1 FROM test_explicit_cast
(5 rows)

--Testcase 90:
SELECT var_samp(c1::numeric) FROM test_explicit_cast; -- Does not push down
        var_samp        
------------------------
 0.10333333333333333333
(1 row)

--Testcase 92:
EXPLAIN VERBOSE
SELECT sum(c1::float8) FROM test_explicit_cast; -- Does not push down
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate  (cost=164.83..164.84 rows=1 width=8)
   Output: sum((c1)::double precision)
   ->  Foreign Scan on public.test_explicit_cast  (cost=100.00..153.86 rows=1462 width=32)
         Output: id, c1
         Remote SQL: SELECT c1 FROM test_explicit_cast
(5 rows)

--Testcase 93:
SELECT sum(c1::float8) FROM test_explicit_cast; -- Does not push down
 sum 
-----
 4.1
(1 row)

--Testcase 94:
SELECT * FROM public.jdbc_fdw_version();
 jdbc_fdw_version 
------------------
              301
(1 row)

--Testcase 95:
SELECT jdbc_fdw_version();
 jdbc_fdw_version 
------------------
              301
(1 row)

--Testcase 70:
DROP SERVER :DB_SERVERNAME CASCADE;
psql:sql/13.8/new_test.sql:267: NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to user mapping for public on server mysql_server
drop cascades to foreign table tbl01
drop cascades to foreign table tbl02
drop cascades to foreign table tbl03
drop cascades to foreign table tbl04
drop cascades to foreign table tbl05
drop cascades to foreign table tbl06
drop cascades to foreign table test_explicit_cast
--Testcase 71:
DROP EXTENSION :DB_EXTENSIONNAME CASCADE;
